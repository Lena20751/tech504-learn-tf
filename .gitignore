
# Local .terraform directories
# Resaon to ignore -contains the provider plugins and related metadata 
# not necessarily sensitive, avoiding bloat 
.terraform/

# .tfstate files
# SUPER IMPORTANT -terraform keeps a log of what its been up to. This can include credentials(like your git commit history)
# one team will share their state files, but not via github. Carrier pigeon maybe 
# whoever is running the terraform commands(i.e apply) needs files to update them + lock  them only 
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
# .tfvars store variable values - may comtain sensitive information such as setup, values 
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# .terraform.lock.hcl - keeps track of the specific versions Terraform has used before- tell you which provider using and specific versions
# uses the same provider versions - to lock in the provider versions - to get another version must communicate this with team